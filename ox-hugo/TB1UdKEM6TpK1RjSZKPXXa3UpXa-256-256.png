
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8"/>
<meta name="nav-disable" content="flex">
<link rel="icon" href="https://img.alicdn.com/tfs/TB1_ZXuNcfpK1RjSZFOXXa6nFXa-32-32.ico" type="image/x-icon" />
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" />
<meta http-equiv="Cache-Control" content="no-siteapp" />
<meta name="renderer" content="webkit" />
<meta http-equiv="x-ua-compatible" content="ie=edge,chrome=1" />
<meta name="viewport"
content="width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no" />
<meta name="applicable-device" content="pc,mobile" />
<meta name="data-spm" content="a2c4g" />
<meta name="aplus-ajax" content="chksum" />
<meta name="aplus-waiting" content="MAN" />
<meta name="aplus-pvhash" content="1" />
<!-- 基础资源 -->
 <title>架构PolarDBPostgreSQL版架构介绍_云原生数据库 PolarDB-阿里云帮助中心</title>
 <link rel="canonical" href="https://help.aliyun.com/zh/polardb/polardb-for-postgresql/polardb-for-postgresql-architecture/" />
 <meta name="keywords" content="回放,日志,节点,存储,需要,只读,数据">
 <meta name="description" content="PolarDB PostgreSQL版是一款阿里云自主研发的企业级数据库产品，采用计算存储分离架构，兼容PostgreSQL与Oracle。PolarDB PostgreSQL版的存储与计算能力均可横向扩展，具有高可靠、高可用、弹性扩展等企业级数据库特性。同时，PolarDB PostgreSQL版具有大规模并行计算能力，可以应对OLTP与OLAP混合负载。还具有时空、向量、搜索、图谱等多模创新特性，可以满足企业对数据处理日新月异的新需求。">

<link rel="icon" href="https://img.alicdn.com/tfs/TB1_ZXuNcfpK1RjSZFOXXa6nFXa-32-32.ico" type="image/x-icon">
<link href="https://g.alicdn.com/aliyun-help/help-portal-fe/0.8.2/css/index.css" rel="stylesheet" />
<script>
window.globalData = {
website: "cn",
lang: "zh",
nodeId:"470242",
};
</script>
<link href="https://g.alicdn.com/code/npm/@ali??hmod-ace-2023-box/0.1.0/index.css,hmod-ace-2023-service-contact-us/0.0.18/index.css,hmod-aliyun-com-global-nav-search/0.1.3/index.css,hmod-aliyun-com-global-nav/0.0.36/index.css" rel="stylesheet"/>
<link href="https://g.alicdn.com/hmod/ace-homepage-2020-hmod-footer/0.0.86/index.css" rel="stylesheet"/>
</head>
<body><script>
with(document)with(body)with(insertBefore(createElement("script"),firstChild))setAttribute("exparams","category=&userid=&aplus&yunid=&&trid=213e20af17022817469192197ea6d1&asid=AQAAAAASwnZl+MCtFgAAAABDmomJ++dwUQ==",id="tb-beacon-aplus",src=(location>"https"?"//g":"//g")+".alicdn.com/alilog/mlog/aplus_v2.js")
</script>

<script>
var _performance_domStart = window.performance && window.performance.now();
</script>
<div id="31f097a615eef901ef451ec038130e2e"><div class="_18a32969382a277c44015217fbc5cb5a_box"><div class="aliyun-com-global-nav" style="height:64px"><div class="global-nav-container"><div class="global-nav-container-top"><div class="aliyun-topbar-element aliyun-logo header-container-left"><a href="https://www.aliyun.com/" class="aliyun-logo-link"><img class="aliyun-logo-image light" src="https://img.alicdn.com/tfs/TB13DzOjXP7gK0jSZFjXXc5aXXa-212-48.png"/></a></div><div class="global-search-wrap"><div class="global-nav-search"></div></div><div class="aliyun-topbar-element aliyun-diff-intro"><div class="common-menu-wrap"><div class="common-menu"><div class="common-menu-inner"><div class="scroll-left-arrow"><i class="navIconfont icon-topnavbutton_left"></i></div><div class="scroll-right-arrow"><i class="navIconfont icon-topnavbutton_right"></i></div><div class="common-menu-scroll-bar"><div class="common-menu-scroll-bar-inner"><div class="common-menu-scroll-bar-mask"></div><a class="global-menu-item" href="https://www.aliyun.com/product/list" target="_self"><span>产品</span><i class="navIconfont icon-topnavput_away"></i></a><a class="global-menu-item" href="javascript://;" target="_self"><span>解决方案</span><i class="navIconfont icon-topnavput_away"></i></a><a class="global-menu-item" href="https://help.aliyun.com/" target="_self"><span>文档与社区</span><i class="navIconfont icon-topnavput_away"></i></a><a class="global-menu-item" href="https://www.aliyun.com/benefit" target="_self"><span>权益中心</span><i class="navIconfont icon-topnavput_away"></i></a><a class="global-menu-item" href="https://www.aliyun.com/price" target="_self"><span>定价</span><i class="navIconfont icon-topnavput_away"></i></a><a class="global-menu-item" href="https://market.aliyun.com/" target="_self"><span>云市场</span><i class="navIconfont icon-topnavput_away"></i></a><a class="global-menu-item" href="https://partner.aliyun.com/management/v2" target="_self"><span>合作伙伴</span><i class="navIconfont icon-topnavput_away"></i></a><a class="global-menu-item" href="https://www.aliyun.com/service" target="_self"><span>支持与服务</span><i class="navIconfont icon-topnavput_away"></i></a><a class="global-menu-item" href="https://www.aliyun.com/about" target="_self"><span>了解阿里云</span><i class="navIconfont icon-topnavput_away"></i></a></div></div></div></div><div class="common-topbar-dropdown"></div></div></div></div><div class="aliyun-topbar-element aliyun-topbar-element-right"><div class="ability-element aliyun-language "><div class="aliyun-language-pointer"><div class="aliyun-language-text"><i class="navIconfont icon-topnavintl"></i></div></div></div><div class="ability-element contact-us"><div class="contact-us-pointer"><span class="contact-us-text"><i class="navIconfont icon-topnavcontact"></i></span></div></div><a class="ability-element" target="_blank" href="https://beian.aliyun.com/">备案</a><a class="ability-element console-link" target="_blank" href="https://home.console.aliyun.com/" rel="nofollow">控制台</a><a class="ability-element aliyun-register" href="https://account.aliyun.com/login/login.htm?oauth_callback=https%3A%2F%2Fwww.aliyun.com%2F" rel="nofollow">登录/注册</a></div></div></div><div class="aliyun-com-mobile-global-nav"></div><div class="_18a32969382a277c44015217fbc5cb5a_box"></div></div></div>

<div id="app">
<div class="main-layout" id="docs-container" >
<div class="help-body-head">
</div>
<div class="stick-top-layout">
<div class="help-layout">
<nav class="aliyun-docs-toc" id="aliyun-docs-toc">
</nav>
<section class="aliyun-docs-view" id="aliyun-docs-view">
<div class="product-detail">
<section class="aliyun-docs-content">
<header class="aliyun-docs-view-header">
<div class="header-topbar">
<div class="header-topbar-breadcrumb">
 <a href="https://help.aliyun.com/">首页</a>
 <span><a href="/zh/polardb">云原生数据库 PolarDB</a></span>
 <span><a href="/zh/polardb/polardb-for-postgresql">云原生数据库PolarDB PostgreSQL版</a></span>
 <span><a href="/zh/polardb/polardb-for-postgresql/kernel-features">自研内核能力</a></span>
 <span><a href="/zh/polardb/polardb-for-postgresql/architecture">架构</a></span>
 <span>PolarDB PostgreSQL版架构介绍</span>
 </div>
</div>
<div class="header-title">
<h1>PolarDB PostgreSQL版架构介绍</h1>
<div class="header-actionbar">
<span class="update-time">更新时间: 2023-11-29 17:09:52</span>
</div>
</div>
</header>
<div class="pc-markdown-container unionContainer" id="pc-markdown-container">
<!-- 内容 -->
<div class="markdown-body">
 <div><div lang="zh" class="icms-help-docs-content">
<main id="main-2271702"><p data-tag="shortdesc" id="fcbd9a906bclc" class="shortdesc"><span data-tag="ph" id="a844c7216b6pl" audience="postgresql" docid="2293176" data-cond-audience="postgresql" class="ph">PolarDB PostgreSQL版</span>是一款阿里云自主研发的企业级数据库产品，采用计算存储分离架构，兼容PostgreSQL与Oracle。<span data-tag="ph" id="ffa992c06bpv0" audience="postgresql" docid="2293176" data-cond-audience="postgresql" class="ph">PolarDB PostgreSQL版</span>的存储与计算能力均可横向扩展，具有高可靠、高可用、弹性扩展等企业级数据库特性。同时，<span data-tag="ph" id="ffa992c16bdhz" audience="postgresql" docid="2293176" data-cond-audience="postgresql" class="ph">PolarDB PostgreSQL版</span>具有大规模并行计算能力，可以应对OLTP与OLAP混合负载。还具有时空、向量、搜索、图谱等多模创新特性，可以满足企业对数据处理日新月异的新需求。</p><div data-tag="conbody" class="conbody"><p id="1bda9f206b25j"><span data-tag="ph" id="ffa992c26bmi3" audience="postgresql" docid="2293176" data-cond-audience="postgresql" class="ph">PolarDB PostgreSQL版</span>支持多种部署形态：存储计算分离部署、X-Paxos三节点部署以及本地盘部署。</p><p id="c3f9de006bwuo">本文通过以下几个方面介绍<span data-tag="ph" id="ffa992c36bc59" audience="postgresql" docid="2293176" data-cond-audience="postgresql" class="ph">PolarDB PostgreSQL版</span>的架构：</p><ul id="6ce0cf226bdng"><li id="6ce0cf206ba9j"><p id="6fabd6006bo4k"><a title="" class="xref" href="#传统数据库的问题">传统数据库的问题</a></p></li><li id="cf1ddf006bnwy"><p id="cf1db7f06b2ha"><a title="" class="xref" href="#polardb-云原生数据库的优势">PolarDB PostgreSQL版云原生数据库的优势</a></p></li><li id="d8ac29016b4b4"><p id="d8ac29006b1u6"><a title="" class="xref" href="#polardb-整体架构概述">PolarDB PostgreSQL版整体架构概述</a></p><ul id="4f6e8d016bvdu"><li id="4ec136006bqi0"><p id="f18395006bo8j"><a title="" class="xref" href="#存储计算分离架构概述">存储计算分离架构概述</a></p></li><li id="697c79016b1om"><p id="697c79006be3q"><a title="" class="xref" href="#htap-架构概述">HTAP架构概述</a></p></li></ul></li><li id="434721976bb1u"><p id="7088ac006bzdx"><a title="" class="xref" href="#polardb-存储计算分离架构详解">PolarDB PostgreSQL版：存储计算分离架构详解</a></p><ul id="7a4077016b0g9"><li id="79e140006bx1r"><p id="851b8c506bu5g"><a title="" class="xref" href="#shared-storage-带来的挑战">Shared-Storage带来的挑战</a></p></li><li id="876973f16buiy"><p id="876973f06bgds"><a title="" class="xref" href="#架构原理">架构原理</a></p></li><li id="897dd5006bk4d"><p id="897dadf06b5ac"><a title="" class="xref" href="#数据一致性">数据一致性</a></p></li><li id="8b749bf16b8c4"><p id="8b749bf06bc9y"><a title="" class="xref" href="#低延迟复制">低延迟复制</a></p></li><li id="8e33bbf16bgur"><p id="938b3a106btb7"><a title="" class="xref" href="#recovery-优化">Recovery优化</a></p></li></ul></li><li id="98f5a3f16ble1"><p id="9c4c49006b38d"><a title="" class="xref" href="#polardb-htap-架构详解">PolarDB PostgreSQL版HTAP架构详解</a></p><ul id="a32a67216bbmq"><li id="a30ca5f16b9s6"><p id="a30ca5f06bg2v"><a title="" class="xref" href="#htap-架构原理">HTAP架构原理</a></p></li><li id="a7ec5c016bzrs"><p id="a7ec5c006b4l7"><a title="" class="xref" href="#分布式优化器">分布式优化器</a></p></li><li id="aa5609016b0m3"><p id="aa5609006br0e"><a title="" class="xref" href="#算子并行化">算子并行化</a></p></li><li id="ae501a016bm96"><p id="ae501a006bkxy"><a title="" class="xref" href="#消除数据倾斜问题">消除数据倾斜问题</a></p></li><li id="b2ed96f16btty"><p id="b2ed96f06brof"><a title="" class="xref" href="#sql-级别弹性扩展">SQL级别弹性扩展</a></p></li><li id="b73b6d416brzi"><p id="b73b6d406b9kv"><a title="" class="xref" href="#事务一致性">事务一致性</a></p></li><li id="bb6a98016b2uz"><p id="c62f66306bidw"><a title="" class="xref" href="#tpc-h-性能-加速比">TPC-H性能：加速比</a></p></li><li id="c889f8016bw26"><p id="cb8b2a106bund"><a title="" class="xref" href="#tpc-h-性能-和-greenplum-的对比">TPC-H性能：和传统MPP数仓对比</a></p></li><li id="cf1980f16bv8k"><p id="d1e5c0506b8vz"><a title="" class="xref" href="#分布式执行加速索引创建">分布式执行加速索引创建</a></p></li><li id="d3b74c006bq7e"><p id="d6fa69106bfh5"><a title="" class="xref" href="#分布式并行执行加速多模-时空数据库">分布式并行执行加速多模：时空数据库</a></p></li></ul></li></ul><h2 tabindex="-1" id="传统数据库的问题"><b>传统数据库的问题</b></h2><p id="20397a806b359">随着用户业务数据量越来越大，业务越来越复杂，传统数据库系统面临巨大挑战，例如：</p><ul id="2fbeb6f26byvq"><li id="2fbeb6f06beyn"><p id="2c02c0616bf3w">存储空间无法超过单机上限。</p></li><li id="312f85016bif4"><p id="34588a606bp9w">通过只读实例进行读扩展，每个只读实例独享一份存储，成本增加。</p></li><li id="35c847006bxvh"><p id="3918aa806bbbv">随着数据量增加，创建只读实例的耗时增加。</p></li><li id="3a1a3c016bgyh"><p id="3ca6da506bk34">主备延迟高。</p></li></ul><h2 tabindex="-1" id="polardb-云原生数据库的优势"><span data-tag="ph" id="ffa9b9d56bh3l" audience="postgresql" docid="2293176" data-cond-audience="postgresql" class="ph">PolarDB PostgreSQL版</span><b>云原生数据库的优势</b></h2><p id="67fa33e06bp0a">针对上述传统数据库的问题，阿里云研发了<span data-tag="ph" id="ffa9b9d66bcki" audience="postgresql" docid="2293176" data-cond-audience="postgresql" class="ph">PolarDB PostgreSQL版</span>云原生数据库。采用了自主研发的计算集群和存储集群分离的架构。具备如下优势：</p><ul id="7815bce26bwvs"><li id="7815bce06bl16"><p id="749f5ad06bkt8">扩展性：存储计算分离，极致弹性。</p></li><li id="790637606b43q"><p id="7f1f30c06bkum">成本：共享一份数据，存储成本低。</p></li><li id="80765c516b2le"><p id="8345a8f06bfqc">易用性：一写多读，透明读写分离。</p></li><li id="8472de516bwx4"><p id="87cd53f06bccz">可靠性：三副本、秒级备份。</p></li></ul><p id="8d2fa7806b0g4"><img id="de27a6b06b7g2" src="https://help-static-aliyun-doc.aliyuncs.com/assets/img/zh-CN/3398639661/p523755.png" alt="image" placement="break" width="800" class="image break"></p><h2 tabindex="-1" id="polardb-整体架构概述"><span data-tag="ph" id="ffa9b9d76bvxo" audience="postgresql" docid="2293176" data-cond-audience="postgresql" class="ph">PolarDB PostgreSQL版</span><b>整体架构概述</b></h2><h3 tabindex="-1" id="存储计算分离架构概述"><b>存储计算分离架构概述</b><img placement="break" alt="image" src="https://help-static-aliyun-doc.aliyuncs.com/assets/img/zh-CN/3398639661/p523768.png" id="cca274306byq0" width="800" class="image break"></h3><p id="0c61e9006bc4a"><span data-tag="ph" id="ffa9b9d86bwdr" audience="postgresql" docid="2293176" data-cond-audience="postgresql" class="ph">PolarDB PostgreSQL版</span>是存储计算分离的设计，存储集群和计算集群可以分别独立扩展：</p><ul id="3ddf96826bw13"><li id="3ddf96806bjb8"><p id="39dcfa006bgg2">当计算能力不够时，可以单独扩展计算集群。</p></li><li id="3ee4d1816b352"><p id="42159f106bgec">当存储容量不够时，可以单独扩展存储集群。</p></li></ul><p id="49af1df06blt7">基于Shared-Storage，主节点和多个只读节点共享一份存储数据，主节点刷脏不能再按照传统的刷脏方式，否则会导致以下问题：</p><ul id="cc2264326bv4p"><li id="cc2264306brv4"><p id="c8c2e5806bt22">只读节点在存储中读取的页面，可能是比较老的版本，不符合当前的状态。</p></li><li id="133d36106b1ja"><p id="17a3c4806bqps">只读节点读取到的页面比自身内存中想要的数据要超前。</p></li><li id="21e580016bmee"><p id="2535e3806by8c">主节点切换到只读节点时，只读节点接管数据更新时，存储中的页面可能是旧的，需要读取日志重新对脏页的恢复。</p></li></ul><p id="3c034a806b7z5">对于第一个问题，我们需要有页面多版本能力；对于第二个问题，我们需要主库控制脏页的刷脏速度。</p><h3 tabindex="-1" id="htap-架构概述"><b>HTAP架构概述</b></h3><p id="d4f901806bsil">读写分离后，单个计算节点无法发挥出存储侧大IO带宽的优势，也无法通过增加计算资源来加速大的查询。<span data-tag="ph" id="3baafda06bw8y" audience="postgresql" docid="2293176" data-cond-audience="postgresql" class="ph">PolarDB PostgreSQL版</span>推出了基于Shared-Storage的MPP分布式并行执行，来加速在OLTP场景下OLAP查询。</p><p id="f171abf06b6nn"><span data-tag="ph" id="3baafda16bw12" audience="postgresql" docid="2293176" data-cond-audience="postgresql" class="ph">PolarDB PostgreSQL版</span>支持一套OLTP场景型的数据在以下两种计算引擎中使用：</p><ul id="26547d726bakh"><li id="26547d706b4iy"><p id="0b26a2806b4c6">单机执行引擎：处理高并发的OLTP型负载。</p></li><li id="28d312016bazu"><p id="2c5422706bvcy">分布式执行引擎：处理大查询的OLAP型负载。</p></li></ul><p id="26c392f06bgkx"><img placement="break" alt="image" src="https://help-static-aliyun-doc.aliyuncs.com/assets/img/zh-CN/3398639661/p523773.png" id="4a1838a06b7pj" width="800" class="image break">在使用相同的硬件资源时性能达到了传统MPP数仓的90%，同时具备了SQL级别的弹性：在计算能力不足时，可随时增加参与OLAP分析查询的CPU，而数据无需重分布。</p><h2 id="polardb-存储计算分离架构详解" tabindex="-1"><span data-tag="ph" id="3baafda26b77p" audience="postgresql" docid="2293176" data-cond-audience="postgresql" class="ph">PolarDB PostgreSQL版</span>：<b>存储计算分离架构详解</b></h2><h3 id="shared-storage-带来的挑战" tabindex="-1"><b>Shared-Storage带来的挑战</b></h3><p id="8c8cbe806b438">基于Shared-Storage，数据库由传统的share nothing，转变成了Shared-Storage架构。需要解决以下问题：</p><ul id="9f0941f26bhu9"><li id="9f0941f06bctu"><p id="9a8f2b806bsa6">数据一致性：由原来的N份计算+N份存储，转变成了N份计算+1份存储。</p></li><li id="a53c2bf16bzqw"><p id="a856d9706bvn2">读写分离：如何基于新架构做到低延迟的复制。</p></li><li id="ab45bc006blxr"><p id="b0720b706bqk3">高可用：如何Recovery和Failover。</p></li><li id="b5ea30f16be3g"><p id="b91fe0806baio">IO模型：如何从Buffer-IO向Direct-IO优化。</p></li></ul><h3 id="架构原理" tabindex="-1"><b>架构原理</b></h3><p id="7d62f3116b9fw"><img placement="break" alt="image" src="https://help-static-aliyun-doc.aliyuncs.com/assets/img/zh-CN/3398639661/p523782.png" id="7d9945506btke" width="800" class="image break">基于Shared-Storage的<span data-tag="ph" id="3baafda36br0c" audience="postgresql" docid="2293176" data-cond-audience="postgresql" class="ph">PolarDB PostgreSQL版</span>的架构原理如下：</p><ul id="11d8a9526bhov"><li id="11d8a9506bx6o"><p id="0ca10f406bwid">主节点为可读可写节点（RW），只读节点为只读（RO）。</p></li><li id="12d57fe06bysz"><p id="165187406b7ii">Shared-Storage层，只有主节点能写入，因此主节点和只读节点能看到一致的落盘的数据。</p></li><li id="1b06aae06bwsc"><p id="1e1990306bkrv">只读节点的内存状态是通过回放WAL保持和主节点同步的。</p></li><li id="433736116bsal"><p id="142d5cd06bdyb">主节点的WAL日志写到Shared-Storage，仅复制WAL的meta给只读节点。</p></li><li id="1b4e9e716b85k"><p id="1f5f1da06biic">只读节点从Shared-Storage上读取WAL并回放。</p></li></ul><h3 id="数据一致性" tabindex="-1"><b>数据一致性</b></h3><h4 id="传统数据库的内存状态同步" tabindex="-1"><b>传统数据库的内存状态同步</b></h4><p id="3a0e52b06blsf">传统share nothing的数据库，主节点和只读节点都有各自的内存和存储，只需要从主节点复制WAL日志到只读节点，并在只读节点上依次回放日志即可，这也是复制状态机的基本原理。</p><h4 id="基于-shared-storage-的内存状态同步" tabindex="-1"><b>基于Shared-Storage的内存状态同步</b></h4><p id="4c5bafd06b3wb">存储计算分离后，Shared-Storage上读取到的页面是一致的，内存状态是通过从Shared-Storage上读取最新的WAL并回放得来，如下图所示：<img id="ccb7f2606b4pe" src="https://help-static-aliyun-doc.aliyuncs.com/assets/img/zh-CN/3398639661/p523839.png" alt="image" placement="break" width="800" class="image break"></p><p id="d1f7a2c06bcob"></p><ol id="e6250a826bwfc"><li id="e6250a806bnvb"><p id="e06b48216b62s">主节点通过刷脏将版本200写入到Shared-Storage。</p></li><li id="e73457a16bunl"><p id="ea5100f06bz9n">只读节点基于版本100，并回放日志得到200。</p></li></ol><h4 id="基于-shared-storage-的-过去页面" tabindex="-1"><b>基于Shared-Storage的过去页面</b></h4><p id="4bcb61406bnnk">上述流程中，只读节点中基于日志回放出来的页面会被淘汰掉，此后需要再次从存储上读取页面，会出现读取的页面是之前的老页面，称为<b>过去页面</b>。如下图所示：<img id="5dfcf9006bngq" src="https://help-static-aliyun-doc.aliyuncs.com/assets/img/zh-CN/4398639661/p523841.png" alt="image" placement="break" width="800" class="image break"></p><ol id="67e2d8e16biqt"><li id="67e2b1d06bd84"><p id="6618c7406byh3">T1时刻，主节点在T1时刻写入日志LSN=200，把页面P1的内容从500更新到600。</p></li><li id="718260f16bq33"><p id="7522b9306becd">只读节点此时页面P1的内容是500。</p></li><li id="797634d06bbk1"><p id="7d8eca506blwo">T2时刻，主节点将日志200的meta信息发送给只读节点，只读节点得知存在新的日志。</p></li><li id="987c19d16bgfy"><p id="9c0715506bzzb">T3时刻，此时在只读节点上读取页面P1，需要读取页面P1和LSN=200的日志，进行一次回放，得到P1的最新内容为600。</p></li><li id="a8eaa4d16btac"><p id="ad4043506b4sg">T4时刻，只读节点上由于BufferPool不足，将回放出来的最新页面P1淘汰掉。</p></li><li id="ba6102e16bwt7"><p id="bdf32a506bjn0">主节点没有将最新的页面P1为600的最新内容刷脏到Shared-Storage上。</p></li><li id="c7ff56e16bh4m"><p id="cd1e11c06buxm">T5时刻，再次从只读节点上发起读取P1操作，由于内存中已经将P1淘汰掉了，因此从Shared-Storage上读取，此时读取到了<b>过去页面</b>的内容。</p></li></ol><h4 id="过去页面-的解法" tabindex="-1"><b>过去页面的解法</b></h4><p id="ef4fbb406b6pl">只读节点在任意时刻读取页面时，需要找到对应的Base页面和对应起点的日志，依次回放。如下图所示：<img id="f9e16b806borv" src="https://help-static-aliyun-doc.aliyuncs.com/assets/img/zh-CN/4398639661/p523842.png" alt="image" placement="break" width="800" class="image break"></p><ol id="7cd2b0d26byme"><li id="7cd2b0d06bh4k"><p id="79c4d4906bt86">在只读节点内存中维护每个Page对应的日志meta。</p></li><li id="85ac77e16bv2e"><p id="89c227306bq9o">在读取时一个Page时，按需逐个应用日志直到期望的Page版本。</p></li><li id="8fc834d16b35e"><p id="93f6c3506b3qt">应用日志时，通过日志的meta从Shared-Storage上读取。</p></li></ol><p id="a1c37a506brb6">通过上述分析，需要维护每个Page到日志的<b>倒排</b>索引，而只读节点的内存是有限的，因此这个Page到日志的索引需要持久化，<span data-tag="ph" id="79804f806bofl" audience="postgresql" docid="2293176" data-cond-audience="postgresql" class="ph">PolarDB PostgreSQL版</span>设计了一个可持久化的索引结构-LogIndex。LogIndex本质是一个可持久化的hash数据结构。</p><ol id="8f3f27526b3oj"><li id="8f3f27506bbtf"><p id="8adb09e06bszr">只读节点通过WAL receiver接收从主节点过来的WAL meta信息。</p></li><li id="963058416bgt7"><p id="9a5a2bd06bd1j">WAL meta记录该条日志修改了哪些Page。</p></li><li id="a156a7616bqxx"><p id="a879bdc06b5p9">将该条WAL meta插入到LogIndex中。其中，key是Page ID，value是LSN。</p></li><li id="b4adac516bg98"><p id="34dc01106bbz5">一条WAL日志可能更新了多个Page（索引分裂），在LogIndex中有多条记录。</p></li><li id="47dc33716bgjv"><p id="4be64a006bu9c">同时在BufferPool中给该Page打上outdate标记，以便下次读取的时候从LogIndex重回放对应的日志。</p></li><li id="5f411f816bx1b"><p id="6310c5206bjpq">当内存达到一定阈值时，LogIndex异步将内存中的hash刷到盘上。<img placement="break" alt="image" src="https://help-static-aliyun-doc.aliyuncs.com/assets/img/zh-CN/4398639661/p524145.png" id="50b86de06bfr9" width="800" class="image break"></p></li></ol><p id="665df6b06b0eq">通过LogIndex解决了刷脏依赖<b>过去页面</b>的问题，也是将只读节点的回放转变成了Lazy的回放：只需要回放日志的meta信息即可。</p><h4 id="基于-shared-storage-的-未来页面" tabindex="-1"><b>基于Shared-Storage的未来页面</b></h4><p id="86cf04706b10e">在存储计算分离后，刷脏依赖还存在<b>未来页面</b>的问题。如下图所示：<img placement="break" alt="image" src="https://help-static-aliyun-doc.aliyuncs.com/assets/img/zh-CN/4398639661/p524147.png" id="8db008c06bmox" width="800" class="image break"></p><ol id="9c25d1026b4dr"><li id="9c25d1006bcbo"><p id="998276606b60e">T1时刻，主节点对P1更新了2次，产生了2条日志，此时主节点和只读节点上页面P1的内容都是500。</p></li><li id="a679dc016beea"><p id="a9e4f3706b7o5">T2时刻， 发送日志LSN=200给只读节点。</p></li><li id="ae0292016bhzn"><p id="b1aab2706bf46">T3时刻，只读节点回放LSN=200的日志，得到P1的内容为600，此时只读节点日志回放到了200，后面的LSN=300的日志对其来说还不存在。</p></li><li id="c16333e16b7b1"><p id="c5090a606biod">T4时刻，主节点刷脏，将P1最新的内容700刷到了Shared-Storage上，同时只读节点上BufferPool淘汰掉了页面P1。</p></li><li id="cde3e2e16by0v"><p id="d31eff606b9fv">T5时刻，只读节点再次读取页面P1，由于BufferPool中不存在P1，因此从共享内存上读取了最新的P1，但是只读节点并没有回放LSN=300的日志，读取到了一个对其来说超前的<b>未来页面</b>。</p></li><li id="e8f471d16b4pz"><p id="ec870e706bxjr"><b>未来页面</b>的问题是：部分页面是<b>未来页面</b>，部分页面是正常的页面，会导致数据不一致。例如，索引分裂成2个Page后，一个读取到了正常的Page，另一个读取到了<b>未来页面</b>，B+Tree的索引结构会被破坏。</p></li></ol><h4 id="未来页面-的解法" tabindex="-1"><b>未来页面的解法</b></h4><p id="176729406brw2"><b>未来页面</b>的原因是主节点刷脏的速度超过了任一只读节点的回放速度（虽然只读节点的Lazy回放已经很快了）。因此，解法就是对主节点刷脏进度时做控制：不能超过最慢的只读节点的回放位点。如下图所示：<img placement="break" alt="image" src="https://help-static-aliyun-doc.aliyuncs.com/assets/img/zh-CN/3398639661/p524158.png" id="29dbbd706b48n" width="800" class="image break"></p><ol id="515925426b3w2"><li id="515925406byzw"><p id="32fb8e306bv0c">只读节点回放到T4位点。</p></li><li id="526bcdc16bcyb"><p id="55d4c2506bk4c">主节点在刷脏时，对所有脏页按照LSN排序，仅刷在T4之前的脏页（包括T4），之后的脏页不刷。</p></li><li id="5e2e0ec16bad9"><p id="6194b9606bklt">其中，T4的LSN位点称为<b>一致性位点</b>。</p></li></ol><h3 id="低延迟复制" tabindex="-1"><b>低延迟复制</b></h3><h4 id="传统流复制的问题" tabindex="-1"><b>传统流复制的问题</b></h4><ol id="7d96d4426bbje"><li id="7d96d4406bszc"><p id="77af99406buc8">同步链路：日志同步路径IO多，网络传输量大。</p></li><li id="7ec457c16b4xw"><p id="823c19606bjdz">页面回放：读取和Buffer修改慢（IO密集型+CPU密集型）。</p></li><li id="8a07a4c16basl"><p id="8eb527406b6n3">DDL回放：修改文件时需要对修改的文件加锁，而加锁的过程容易被阻塞，导致DDL慢。</p></li><li id="94c4d1d16bt08"><p id="986f8a506bb44">快照更新：RO高并发引起事务快照更新慢。</p></li></ol><p id="9ed6a3b06bwys"><img placement="break" alt="image" src="https://help-static-aliyun-doc.aliyuncs.com/assets/img/zh-CN/4398639661/p524169.png" id="9fdb42706b0sm" width="800" class="image break"></p><p id="a11967c06bdkv">流程如下：</p><ol id="b014b3b26bexc"><li id="b014b3b06baot"><p id="b39a7f106bful">主节点写入WAL日志到本地文件系统中。</p></li><li id="b9eeacb06bctc"><p id="bd2965506bi48">WAL Sender进程读取，并发送。</p></li><li id="c0216fa16b740"><p id="c2ff62406bik1">只读节点的WAL Receiver进程接收写入到本地文件系统中。</p></li><li id="c608aaa16b6ig"><p id="c9d320206bwce">回放进程读取WAL日志，读取对应的Page到BufferPool中，并在内存中回放。</p></li><li id="d0a382a16b8u7"><p id="d36191306bnhg">主节点刷脏页到Shared Storage。</p></li></ol><p id="db4e60306bc9j">从上述流程可以看到，整个链路是很长的，只读节点延迟高，影响用户业务读写分离负载均衡。</p><h4 id="优化-1-只复制-meta" tabindex="-1"><b>优化1：只复制Meta</b></h4><p id="eb3b5f206baqb">因为底层是Shared-Storage，只读节点可直接从Shared-Storage上读取所需要的WAL数据。因此主节点只把WAL日志的元数据（去掉Payload）复制到只读节点，这样网络传输量小，减少关键路径上的IO。如下图所示：</p><p id="f7d255406byb4"><img placement="break" alt="image" src="https://help-static-aliyun-doc.aliyuncs.com/assets/img/zh-CN/3398639661/p524176.png" id="fac704306blay" width="800" class="image break"></p><p id="fc2f1fb06bqwq">优化流程如下：</p><ol id="0804c1a26bpud"><li id="0804c1a06b6ph"><p id="0b094f106b67d">WAL Record是由：Header，PageID，Payload组成。</p></li><li id="0ec2ad916b5z3"><p id="11aef8106bwtm">由于只读节点可以直接读取Shared-Storage上的WAL文件，因此主节点只把WAL日志的元数据发送（复制）到只读节点，包括：Header，PageID。</p></li><li id="1b8a50a16bi3u"><p id="1f1043106b6tf">在只读节点上，通过WAL的元数据直接读取Shared-Storage上完整的WAL文件。</p></li></ol><p id="2ab2a0006bav7">通过上述优化，能显著减少主节点和只读节点间的网络传输量。从下图可以看到网络传输量减少了 98%。</p><p id="39ddd5906b9c4"><img placement="break" alt="image" src="https://help-static-aliyun-doc.aliyuncs.com/assets/img/zh-CN/4398639661/p524184.png" id="e96411a06bv5e" width="800" class="image break"></p><h4 id="优化-2-页面回放优化" tabindex="-1"><b>优化2：页面回放优化</b></h4><p id="3a5d2cd06b4xr">在传统数据库中日志回放的过程中会读取大量的Page并逐个日志Apply，然后落盘。该流程在用户读IO的关键路径上，借助存储计算分离可以做到：如果只读节点上Page不在BufferPool中，不产生任何IO，仅仅记录LogIndex即可。</p><p id="704adea06bodv">可以将回放进程中的以下IO操作offload到session进程中：</p><ul id="a9e2acb26bye3"><li id="a9e2acb06bqt1"><p id="a5670fa06bfj9">数据页IO开销。</p></li><li id="aabce0116bmkr"><p id="addc48806bp8h">日志apply开销。</p></li><li id="b2a4cd116b854"><p id="b55b61906bu16">基于LogIndex页面的多版本回放。</p></li></ul><p id="c12a25b06by0r">如下图所示，在只读节点上的回放进程中，在Apply一条WAL的meta时：</p><p id="cb1e0f506b74f"><img placement="break" alt="image" src="https://help-static-aliyun-doc.aliyuncs.com/assets/img/zh-CN/4398639661/p524202.png" id="cb4371a06bco8" width="800" class="image break"></p><ul id="d925fa926b6t0"><li id="d925fa906b6hd"><p id="d0e120806bunc">如果对应Page不在内存中，仅仅记录LogIndex。</p></li><li id="da13dd016b0vz"><p id="dd02bf906b30c">如果对应的Page在内存中，则标记为Outdate，并记录LogIndex，回放过程完成。</p></li><li id="e21bae116bn0t"><p id="e4de77906bixw">用户session进程在读取Page时，读取正确的Page到BufferPool中，并通过LogIndex来回放相应的日志。</p></li><li id="ee7526016bfaz"><p id="f18d62806bfz7">可以看到，主要的IO操作由原来的单个回放进程offload到了多个用户进程。</p></li></ul><p id="04c239706bdd4">通过上述优化，能显著减少回放的延迟，比其他云原生数据库快30倍。</p><h4 id="优化-3-ddl-锁回放优化" tabindex="-1"><b>优化3：DDL锁回放优化</b></h4><p id="67d347706chvp">在主节点执行DDL时（例如，<code data-tag="code" class="code">drop table</code>），需要在所有节点上都对表上排他锁，这样能保证表文件不会在只读节点上读取时被主节点删除掉了（因为文件在Shared-Storage上只有一份）。在所有只读节点上对表上排他锁是通过WAL复制到所有的只读节点，只读节点回放DDL锁来完成。而回放进程在回放DDL锁时，对表上锁可能会阻塞很久，因此可以通过把DDL锁offload到其他进程上来优化回放进程的关键路径。</p><p id="a92933606ccpi"><img id="a995fef06chrp" src="https://help-static-aliyun-doc.aliyuncs.com/assets/img/zh-CN/3398639661/p524333.png" alt="image" placement="break" width="800" class="image break"></p><p id="b20592806ckgo">通过上述优化，能够保证回放进程一直处于平滑的状态，不会因为去等DDL而阻塞了回放的关键路径。</p><p id="b7c792406cc59"><img id="8b7721c06cy79" src="https://help-static-aliyun-doc.aliyuncs.com/assets/img/zh-CN/4398639661/p524353.png" alt="image" placement="break" width="800" class="image break"></p><p id="952465706ch5v">上述3个优化之后，极大的降低了复制延迟，能够带来如下优势：</p><ul id="a14170a26cuqb"><li id="a14170a06cp2o"><p id="9e2340b06c3gu">读写分离：负载均衡，更接近Oracle RAC使用体验。</p></li><li id="a47488216czz4"><p id="a8fb6fd06cgkk">高可用：加速HA流程。</p></li><li id="abe968016c8di"><p id="b0e57fb06csug">稳定性：最小化未来页的数量，可以写更少或者无需写页面快照。</p></li></ul><h3 id="recovery-优化" tabindex="-1"><b>Recovery优化</b></h3><h4 id="背景" tabindex="-1"><b>背景</b></h4><p id="c29452e06crny">数据库OOM、Crash等场景恢复时间长，本质上是日志回放慢，在共享存储Direct-IO模型下问题更加突出。</p><p id="d4cc17406cp6t"><img id="d51a10306ctas" src="https://help-static-aliyun-doc.aliyuncs.com/assets/img/zh-CN/4398639661/p524484.png" alt="image" placement="break" width="800" class="image break"></p><h4 id="lazy-recovery" tabindex="-1"><b>Lazy Recovery</b></h4><p id="f40a71606cn71">上述内容介绍通过LogIndex在只读节点上做到了Lazy的回放，在主节点重启后的recovery过程中，本质也是在回放日志，因此，可以借助Lazy回放来加速recovery的过程：</p><p id="221f51606clua"><img id="2255cab06cqk4" src="https://help-static-aliyun-doc.aliyuncs.com/assets/img/zh-CN/3398639661/p524488.png" alt="image" placement="break" width="800" class="image break"></p><ol id="2cbbd7126c1be"><li id="2cbbd7106cux5"><p id="3118c8906cmc1">从checkpoint点开始逐条去读WAL日志。</p></li><li id="353667206cl5f"><p id="39204b806cm5l">回放完LogIndex日志后，即认为回放完成。</p></li><li id="3c3a5cc16cqmf"><p id="405a6c506clwd">recovery完成，开始提供服务。</p></li><li id="42a483616c7pa"><p id="4653cfc06c6vi">真正的回放被offload到了重启之后进来的session进程中。</p></li></ol><p id="519596206cwrp">优化之后（回放500 MB日志量），如下图所示：</p><p id="59285e406chqn"><img id="243432306cwkn" src="https://help-static-aliyun-doc.aliyuncs.com/assets/img/zh-CN/4398639661/p524501.png" alt="image" placement="break" width="800" class="image break"></p><h4 id="persistent-bufferpool" tabindex="-1"><b>Persistent BufferPool</b></h4><p id="2faaeb406cj3f">上述方案优化了在recovery的重启速度，但是在重启之后，session进程通过读取WAL日志来回放想要的page。表示为在recovery之后会有短暂的响应慢的问题。优化的办法为在数据库重启时BufferPool并不销毁，如下图所示：crash和restart期间BufferPool不销毁。</p><p id="5d482a406cy5c"><img id="61ecd3206c5ty" src="https://help-static-aliyun-doc.aliyuncs.com/assets/img/zh-CN/3398639661/p524505.png" alt="image" placement="break" width="800" class="image break"></p><p id="6faba7706czqz">内核中的共享内存分成2部分：</p><ul id="0089d5f26cife"><li id="0089d5f06ce9x"><p id="fbcf0d006cok7">全局结构，ProcArray等。</p></li><li id="020be2116c49k"><p id="06626af06cd5p">BufferPool结构；其中BufferPool通过具名共享内存来分配，在进程重启后仍然有效。而全局结构在进程重启后需要重新初始化。</p></li></ul><p id="4a6016f06chcg"><img placement="break" alt="image" src="https://help-static-aliyun-doc.aliyuncs.com/assets/img/zh-CN/0343069661/p524825.png" id="81bdddb06ekqq" width="800" class="image break"></p><p id="56a962406c6dw">而BufferPool中并不是所有的Page都是可以复用的。例如：在重启前，某进程对Page上X锁，随后crash了，该X锁就没有进程来释放了。因此，在crash和restart之后需要把所有的BufferPool遍历一遍，剔除掉不能被复用的Page。另外，BufferPool的回收依赖kubernetes。该优化之后，使得重启前后性能平稳。</p><p id="731366b06cjy2"><img id="8126c3a06c34m" src="https://help-static-aliyun-doc.aliyuncs.com/assets/img/zh-CN/4398639661/p524514.png" alt="image" placement="break" width="800" class="image break"></p><h2 tabindex="-1" id="polardb-htap-架构详解"><span data-tag="ph" id="ce2829506emqw" audience="postgresql" docid="2293176" data-cond-audience="postgresql" class="ph">PolarDB PostgreSQL版</span><b>HTAP架构详解</b></h2><p id="fc0cb5706cytw"><span data-tag="ph" id="ce2829516e9oh" audience="postgresql" docid="2293176" data-cond-audience="postgresql" class="ph">PolarDB PostgreSQL版</span>读写分离后，由于底层是存储池，理论上IO吞吐是无限大的。而大查询只能在单个计算节点上执行，单个计算节点的CPU/MEM/IO是有限的，因此单个计算节点无法发挥出存储侧的大IO带宽的优势，也无法通过增加计算资源来加速大的查询。<span data-tag="ph" id="ce2829526enhb" audience="postgresql" docid="2293176" data-cond-audience="postgresql" class="ph">PolarDB PostgreSQL版</span>推出了基于Shared-Storage的MPP分布式并行执行，来加速在OLTP场景下OLAP查询。</p><h3 tabindex="-1" id="htap-架构原理"><b>HTAP架构原理</b></h3><p id="740090606cqth"><span data-tag="ph" id="ce2829536en7z" audience="postgresql" docid="2293176" data-cond-audience="postgresql" class="ph">PolarDB PostgreSQL版</span>底层存储在不同节点上是共享的，因此不能直接像传统MPP一样去扫描表。<span data-tag="ph" id="ce2850606ezkc" audience="postgresql" docid="2293176" data-cond-audience="postgresql" class="ph">PolarDB PostgreSQL版</span>在原来单机执行引擎上支持了MPP分布式并行执行，同时对Shared-Storage进行了优化。 基于Shared-Storage的MPP是业界首创。原理如下：</p><p id="91a908406cgo3"></p><ul id="9f209a626c448"><li id="9f209a606csw6"><p id="96a3e7706cf6d">Shuffle算子屏蔽数据分布。</p></li><li id="a05a04c16cb7h"><p id="a4a988c06cx3x">ParallelScan算子屏蔽共享存储。</p></li></ul><p id="a7ce6f706cey5"><img id="ad1859006cpo2" src="https://help-static-aliyun-doc.aliyuncs.com/assets/img/zh-CN/3398639661/p524517.png" alt="image" placement="break" width="800" class="image break"></p><p id="b4ed81506chcl">如图所示：</p><ul id="c3eaf0226cglc"><li id="c3eaf0206cs9s"><p id="bcb64d906cfng">表A和表B做join，并做聚合。</p></li><li id="c4b7dd106c2u5"><p id="c8f4ea806c03s">共享存储中的表仍然是单张表，并没有做物理上的分区。</p></li><li id="cbbbaba16cj1h"><p id="d0cd47206canq">重新设计4类扫描算子，使之在扫描共享存储上的表时能够分片扫描，形成virtual partition。</p></li></ul><h3 tabindex="-1" id="分布式优化器"><b>分布式优化器</b></h3><p id="ea2773806cr3b">基于社区的GPORCA优化器扩展了能感知共享存储特性的Transformation Rules。使得能够探索共享存储下特有的Plan空间。例如，对于一个表在<span data-tag="ph" id="ce2850616ealz" audience="postgresql" docid="2293176" data-cond-audience="postgresql" class="ph">PolarDB PostgreSQL版</span>中既可以全量的扫描，也可以分区域扫描，这个是和传统MPP的本质区别。如下图所示，上面灰色部分是<span data-tag="ph" id="ce2850626e3tk" audience="postgresql" docid="2293176" data-cond-audience="postgresql" class="ph">PolarDB PostgreSQL版</span>内核与GPORCA优化器的适配部分。下半部分是ORCA内核，灰色模块是在ORCA内核中对共享存储特性所做的扩展。</p><p id="3c5d49e06cz3m"><img id="3d1799306c4vb" src="https://help-static-aliyun-doc.aliyuncs.com/assets/img/zh-CN/4398639661/p524524.png" alt="image" placement="break" width="800" class="image break"></p><h3 tabindex="-1" id="算子并行化"><b>算子并行化</b></h3><p id="453256006cgny"><span data-tag="ph" id="ce2850636en9o" audience="postgresql" docid="2293176" data-cond-audience="postgresql" class="ph">PolarDB PostgreSQL版</span>中有4类算子需要并行化，以下介绍一个具有代表性的Seqscan的算子的并行化。</p><p id="50ec59a06cod3">为了最大限度的利用存储的大IO带宽，在顺序扫描时，按照4 MB为单位做逻辑切分，将IO尽量打散到不同的盘上，达到所有的盘同时提供读服务的效果。这样做还有一个优势，就是每个只读节点只扫描部分表文件，则最终能缓存的表大小是所有只读节点的BufferPool总和。</p><p id="6cc9fc906cyj2"><img id="70e9e5106cltc" src="https://help-static-aliyun-doc.aliyuncs.com/assets/img/zh-CN/3398639661/p524526.png" alt="image" placement="break" width="800" class="image break"></p><p id="8067ce806cr71">下面的图表中：</p><ul id="8d8d70126c22f"><li id="8d8d70106c94z"><p id="87203c306c5hv">增加只读节点，扫描性能线性提升30倍。</p></li><li id="8f23ee916cfjw"><p id="9363e2306comz">打开Buffer时，扫描从37分钟降到3.75秒。</p></li></ul><p id="a07bc8206cgvg"><img id="a4cb73306c1fq" src="https://help-static-aliyun-doc.aliyuncs.com/assets/img/zh-CN/4398639661/p524527.png" alt="image" placement="break" width="800" class="image break"></p><h3 tabindex="-1" id="消除数据倾斜问题"><b>消除数据倾斜问题</b></h3><p id="b3bdbe706ct9j">倾斜是传统MPP固有的问题：</p><ul id="d7e03b726ckte"><li id="d7e03b706c8tu"><p id="c23904f06czqr">在<span data-tag="ph" id="ce2850646el81" audience="postgresql" docid="2293176" data-cond-audience="postgresql" class="ph">PolarDB PostgreSQL版</span>中，大对象的是通过heap表关联TOAST​表，无论对哪个表切分都无法达到均衡。</p></li><li id="d8d60d216c71l"><p id="dd4156806cq1t">另外，不同只读节点的事务、Buffer、网络、IO负载抖动。</p></li></ul><p id="e5b779c06c05d">以上两点会导致分布执行时存在长尾进程。</p><p id="e77863a06chkj"><img id="eb8c17206cx4x" src="https://help-static-aliyun-doc.aliyuncs.com/assets/img/zh-CN/4398639661/p524528.png" alt="image" placement="break" width="800" class="image break"></p><p id="ed4b05306cmbj"></p><ul id="017141026c03e"><li id="017141006cp1u"><p id="f666b7416ca5g">协调节点内部分成DataThread和ControlThread。</p></li><li id="024f1de16cdu9"><p id="05f171f16czjg">DataThread负责收集汇总元组。</p></li><li id="092c2a916c1r1"><p id="0d843a106cv8y">ControlThread负责控制每个扫描算子的扫描进度。</p></li><li id="104a5ef16cmi3"><p id="150639506cerf">扫描快的工作进程能多扫描逻辑的数据切片。</p></li><li id="167644106ciq4"><p id="1b0394606cwes">过程中需要考虑Buffer的亲和性。</p></li></ul><div id="3d16b9606cpeh" type="note" class="note note-note"><div class="note-icon-wrapper"><i class="icon-note note note"></i></div><div class="noteContentSpan"><strong>说明 </strong><p id="28a5b8f06cky1">尽管是动态分配，尽量维护Buffer的亲和性。另外，每个算子的上下文存储在worker的私有内存中，Coordinator不存储具体表的信息。</p></div></div><p id="477265806cf74">下面表格中，当出现大对象时，静态切分出现数据倾斜，而动态扫描仍然能够线性提升。</p><p id="49fa21d06ch8s"><img id="4e2d1d206cxrg" src="https://help-static-aliyun-doc.aliyuncs.com/assets/img/zh-CN/4398639661/p524529.png" alt="image" placement="break" width="800" class="image break"></p><h3 tabindex="-1" id="sql-级别弹性扩展"><b>SQL级别弹性扩展</b></h3><p id="55d3bb606cdnv">利用数据共享的特点，还可以支持云原生下极致弹性的要求。将Coordinator全链路上各个模块所需要的外部依赖存在共享存储上，同时worker全链路上需要的运行时参数通过控制链路从Coordinator同步过来，使Coordinator和worker无状态化。</p><p id="6ee8ef806ctyq"><img id="6f386f106ckg2" src="https://help-static-aliyun-doc.aliyuncs.com/assets/img/zh-CN/4398639661/p524530.png" alt="image" placement="break" width="800" class="image break"></p><p id="77c611f06cl7j">因此：</p><ul id="8f24bc726czzk"><li id="8f24bc706czr2"><p id="81390bc06cm52">SQL连接的任意只读节点都可以成为Coordinator节点，这解决了Coordinator单点问题。</p></li><li id="9040dad16cllz"><p id="952c9ed06cqvt">支持不同的SQL使用不同的CPU数目执行，灵活的配置不同业务SQL配置不同的CPU核心数。</p></li></ul><p id="1df2f6b06cltf"><img id="1e84d6706cwkd" src="https://help-static-aliyun-doc.aliyuncs.com/assets/img/zh-CN/3398639661/p524531.png" alt="image" placement="break" width="800" class="image break"></p><h3 tabindex="-1" id="事务一致性"><b>事务一致性</b></h3><p id="2bd30ea06coth">多个计算节点数据一致性通过等待回放和globalsnapshot机制来完成。等待回放保证所有worker能看到所需要的数据版本，而globalsnapshot保证了选出一个统一的版本。</p><p id="6afc2f806cjld"><img id="6b4a4f806cet3" src="https://help-static-aliyun-doc.aliyuncs.com/assets/img/zh-CN/4398639661/p524533.png" alt="image" placement="break" width="800" class="image break"></p><h3 tabindex="-1" id="tpc-h-性能-加速比"><b>TPC-H性能：加速比</b></h3><p id="78ea2a216c67k"><img id="7e9df9106cu7j" src="https://help-static-aliyun-doc.aliyuncs.com/assets/img/zh-CN/3398639661/p524534.png" alt="image" placement="break" width="800" class="image break"></p><p id="877046106cinb">使用1 TB的TPC-H进行了测试，首先对比了<span data-tag="ph" id="ce2877706ennh" audience="postgresql" docid="2293176" data-cond-audience="postgresql" class="ph">PolarDB PostgreSQL版</span>新的分布式并行和单机并行的性能，有3条SQL提速60倍，19条SQL提速10倍以上。</p><p id="aaae56806cj8e"><img id="aeef0d706c5vl" src="https://help-static-aliyun-doc.aliyuncs.com/assets/img/zh-CN/3398639661/p524535.png" alt="image" placement="break" width="800" class="image break"></p><p id="afc45ed06cgy4"><img id="b3df17306c7aj" src="https://help-static-aliyun-doc.aliyuncs.com/assets/img/zh-CN/4398639661/p524536.png" alt="image" placement="break" width="800" class="image break"></p><p id="bab371506cs8n">此外，使用分布式执行引擎测试，增加CPU时的性能，可以看到，从16核和128核时性能线性提升。单看22条SQL，通过增加CPU，每条SQL性能线性提升。</p><h3 tabindex="-1" id="tpc-h-性能-和-greenplum-的对比"><b>TPC-H性能：和传统MPP数仓对比</b></h3><p id="35dfbaf06chw1">和传统MPP数仓对比，同样使用16个节点，<span data-tag="ph" id="ce2877716eluz" audience="postgresql" docid="2293176" data-cond-audience="postgresql" class="ph">PolarDB PostgreSQL版</span>的性能是传统MPP数仓的90%。</p><p id="4e19f8606c7el"><img id="52d250506cm8u" src="https://help-static-aliyun-doc.aliyuncs.com/assets/img/zh-CN/3398639661/p524538.png" alt="image" placement="break" width="800" class="image break"></p><p id="55ed73006c9u7"><img id="5a82b2906cej8" src="https://help-static-aliyun-doc.aliyuncs.com/assets/img/zh-CN/3398639661/p524539.png" alt="image" placement="break" width="800" class="image break"></p><p id="613ca6e06c9ob">前面讲到给<span data-tag="ph" id="ce2877726e2e2" audience="postgresql" docid="2293176" data-cond-audience="postgresql" class="ph">PolarDB PostgreSQL版</span>的分布式引擎做到了弹性扩展，数据不需要充分重分布，当dop=8时，性能是传统MPP数仓的5.6倍。</p><h3 tabindex="-1" id="分布式执行加速索引创建"><b>分布式执行加速索引创建</b></h3><p id="8930c5506c4cd">OLTP业务中会建大量的索引，经分析建索引过程中，80%是在排序和构建索引页，20%在写索引页。通过使用分布式并行来加速排序过程，同时流水化批量写入。</p><p id="a599b8506c8i8"><img id="a5d820e06c0en" src="https://help-static-aliyun-doc.aliyuncs.com/assets/img/zh-CN/3398639661/p524541.png" alt="image" placement="break" width="800" class="image break"></p><p id="ac7c6a506c7mo">上述优化能够使得创建索引有4~5倍的提升。</p><p id="b0a860c06chsn"><img id="b59f21406cnxb" src="https://help-static-aliyun-doc.aliyuncs.com/assets/img/zh-CN/4398639661/p524542.png" alt="image" placement="break" width="800" class="image break"></p><h3 tabindex="-1" id="分布式并行执行加速多模-时空数据库"><b>分布式并行执行加速多模：时空数据库</b></h3><p id="bc9052306cnua"><span data-tag="ph" id="ce289e806epdl" audience="postgresql" docid="2293176" data-cond-audience="postgresql" class="ph">PolarDB PostgreSQL版</span>是对多模数据库，支持时空数据。时空数据库是计算密集型和IO密集型，可以借助分布式执行来加速。<span data-tag="ph" id="ce289e816eeqs" audience="postgresql" docid="2293176" data-cond-audience="postgresql" class="ph">PolarDB PostgreSQL版</span>针对共享存储退出了扫描共享RTREE索引的功能。</p><p id="eb4828f06ci6j"><img id="eea117f06c0l3" src="https://help-static-aliyun-doc.aliyuncs.com/assets/img/zh-CN/3398639661/p524543.png" alt="image" placement="break" width="800" class="image break"></p><p id="fe842bd06cm8o"></p><ul id="ff00fcf06cvm8"><li id="ff00fcf26cgk9"><p id="ff00fcf16c3gz">数据量：40000万，500 GB。</p></li><li id="038106d16ct8y"><p id="0772da716cnws">规格：5个只读节点，每个节点规格为16核CPU、128 GB内存。</p></li><li id="114fe0b16cpkd"><p id="15f8a8406cgf6">性能：</p><ul id="1ab6cc916cp9u"><li id="1a30fac16cr2e"><p id="1c41d9606cybb">随CPU数目线性提升。</p></li><li id="1dd0b6c06c6q2"><p id="2098fe806cxtn">80核CPU时，提升<b>71倍。</b></p></li></ul></li></ul><p id="33cee6e06cqgl"><img id="350989c06ckw9" src="https://help-static-aliyun-doc.aliyuncs.com/assets/img/zh-CN/4398639661/p524546.png" alt="image" placement="break" width="800" class="image break"></p><p id="8d6ee1006c6ee"></p></div></main>

</div></div>
 </div>
</div>
</section>
<div class="aliyun-docs-synopsis" id="aliyun-docs-synopsis">
</div>
</div>
</section>
</div>
</div>
</div>
<div class="aliyun-app-layout">
<div class="doc-recommendation">
<ul data-tracker-container="helpdocdetail">
 <li>
<a href="https://help.aliyun.com/zh/polardb/polardb-for-postgresql/features-2" data-tracker-scm="20140722.H_469573._.ID_469573-OR_rec-V_1" title="云原生数据库 PolarDB-概览">云原生数据库 PolarDB-概览</a>
</li>
 <li>
<a href="https://help.aliyun.com/zh/polardb/polardb-for-postgresql/create-a-polardb-for-postgresql-cluster" data-tracker-scm="20140722.H_118063._.ID_118063-OR_rec-V_1" title="创建PolarDB PostgreSQL版数据库集群">创建PolarDB PostgreSQL版数据库集群</a>
</li>
 <li>
<a href="https://help.aliyun.com/zh/polardb/polardb-for-mysql/what-is-polardb-for-mysql-enterprise-edition" data-tracker-scm="20140722.H_58764._.ID_58764-OR_rec-V_1" title="什么是PolarDB MySQL企业版">什么是PolarDB MySQL企业版</a>
</li>
 <li>
<a href="https://help.aliyun.com/zh/polardb/polardb-for-postgresql/what-is-polardb" data-tracker-scm="20140722.H_173263._.ID_173263-OR_rec-V_1" title="什么是PolarDB">什么是PolarDB</a>
</li>
 <li>
<a href="https://help.aliyun.com/zh/polardb/polardb-for-postgresql/architecture-2" data-tracker-scm="20140722.H_173266._.ID_173266-OR_rec-V_1" title="产品架构">产品架构</a>
</li>
 <li>
<a href="https://help.aliyun.com/zh/polardb/polardb-for-postgresql/benefits" data-tracker-scm="20140722.H_173264._.ID_173264-OR_rec-V_1" title="产品优势">产品优势</a>
</li>
 <li>
<a href="https://help.aliyun.com/zh/polardb/polardb-for-postgresql/performance-comparison-with-similar-postgresql-cloud-native-databases" data-tracker-scm="20140722.H_466344._.ID_466344-OR_rec-V_1" title="与同类PostgreSQL云原生数据库性能对比">与同类PostgreSQL云原生数据库性能对比</a>
</li>
 <li>
<a href="https://help.aliyun.com/zh/polardb/polardb-for-postgresql/read-ahead-and-pre-extension" data-tracker-scm="20140722.H_466798._.ID_466798-OR_rec-V_1" title="预读和预扩展">预读和预扩展</a>
</li>
 </ul>
</div>


<!-- seo -->
<a href="https://www.aliyun.com/">阿里云首页</a>
<a href="https://www.aliyun.com/product/polardb" title="云原生数据库 PolarDB">云原生数据库 PolarDB</a>
<a href="https://developer.aliyun.com/database/" title="相关技术圈">相关技术圈</a>
</div>
</div>
<script>
var _performance_domEnd = window.performance && window.performance.now();
</script>
<script src="https://cloud-assets.alicdn.com/website.js"></script>
<div id="182ceda749bc27b05e817e7303046443"><div class="ace-homepage-2020-hmod-footer ace-view-fullColumn" style="background:#ECECEE;opacity:1"><div class="ace-view-center"><div class="homepage-footer-wrap homepage"><div class="homepage-footer-top"><div class="homepage-footer-top-inner-wrap"><div class="homepage-footer-main-services"><div class="ali-main-services"><span class="ali-main-services-title">为什么选择阿里云</span><a class="ali-main-services-link" href="https://www.aliyun.com/about/what-is-cloud-computing" target="_blank">什么是云计算</a><a class="ali-main-services-link" href="https://infrastructure.aliyun.com/" target="_blank">全球基础设施</a><a class="ali-main-services-link" href="https://www.aliyun.com/why-us/leading-technology" target="_blank">技术领先</a><a class="ali-main-services-link" href="https://www.aliyun.com/why-us/reliability" target="_blank">稳定可靠</a><a class="ali-main-services-link" href="https://www.aliyun.com/why-us/security-compliance" target="_blank">安全合规</a><a class="ali-main-services-link" href="https://www.aliyun.com/analyst-reports" target="_blank">分析师报告</a></div><div class="ali-main-services"><span class="ali-main-services-title">产品和定价</span><a class="ali-main-services-link" href="https://www.aliyun.com/product/list" target="_blank">全部产品</a><a class="ali-main-services-link" href="https://free.aliyun.com/" target="_blank">免费试用</a><a class="ali-main-services-link" href="https://www.aliyun.com/product/news" target="_blank">产品动态</a><a class="ali-main-services-link" href="https://www.aliyun.com/price" target="_blank">产品定价</a><a class="ali-main-services-link" href="https://www.aliyun.com/price/product" target="_blank">价格计算器</a><a class="ali-main-services-link" href="https://www.aliyun.com/price/cost-management" target="_blank">云上成本管理</a></div><div class="ali-main-services"><span class="ali-main-services-title">解决方案</span><a class="ali-main-services-link" href="https://www.aliyun.com/solution/tech-solution" target="_blank">技术解决方案</a></div><div class="ali-main-services"><span class="ali-main-services-title">文档与社区</span><a class="ali-main-services-link" href="https://help.aliyun.com/" target="_blank">文档</a><a class="ali-main-services-link" href="https://developer.aliyun.com/" target="_blank">开发者社区</a><a class="ali-main-services-link" href="https://tianchi.aliyun.com/" target="_blank">天池大赛</a><a class="ali-main-services-link" href="https://edu.aliyun.com/" target="_blank">培训与认证</a></div><div class="ali-main-services"><span class="ali-main-services-title">权益中心</span><a class="ali-main-services-link" href="https://free.aliyun.com/" target="_blank">免费试用</a><a class="ali-main-services-link" href="https://university.aliyun.com/" target="_blank">高校计划</a><a class="ali-main-services-link" href="https://startup.aliyun.com/startups" target="_blank">企业扶持计划</a><a class="ali-main-services-link" href="https://promotion.aliyun.com/ntms/yunparter/index" target="_blank">推荐返现计划</a></div><div class="ali-main-services"><span class="ali-main-services-title">支持与服务</span><a class="ali-main-services-link" href="https://www.aliyun.com/contact" target="_blank">基础服务</a><a class="ali-main-services-link" href="https://www.aliyun.com/service/supportplans" target="_blank">企业增值服务</a><a class="ali-main-services-link" href="https://www.aliyun.com/service/devopsimpl/devopsimpl_cloudmigration_public_cn" target="_blank">迁云服务</a><a class="ali-main-services-link" href="https://help.aliyun.com/noticelist.html" target="_blank">官网公告</a><a class="ali-main-services-link" href="https://status.aliyun.com/" target="_blank">系统状态</a><a class="ali-main-services-link" href="https://security.aliyun.com/trust" target="_blank">信任中心</a></div></div><div class="about-us ali-main-services"><div class="ali-main-services-title">关注阿里云</div><div class="ali-main-services-desc">关注阿里云公众号或下载阿里云APP，关注云资讯，随时随地运维管控云服务</div><span><img src="https://img.alicdn.com/tfs/TB1UdKEM6TpK1RjSZKPXXa3UpXa-256-256.png" alt="阿里云APP" class="ali-official-code"/></span><span><img src="https://img.alicdn.com/tfs/TB1AOdINW6qK1RjSZFmXXX0PFXa-258-258.jpg" alt="阿里云微信" class="ali-official-code"/></span><div class="consult-text">售前咨询：95187-1</div><div class="consult-text">售后服务：400-80-13260</div></div></div></div></div><div class="homepage-footer-wrap"><div class="ali-about-container"><div class="about-link-wrap"><a class="ace-link ace-link-primary ali-about-link" href="https://terms.aliyun.com/legal-agreement/terms/suit_bu1_ali_cloud/suit_bu1_ali_cloud202107091605_49213.html" target="_blank">法律声明及隐私权政策</a><a class="ace-link ace-link-primary ali-about-link" href="https://terms.alicdn.com/legal-agreement/terms/platform_service/20220906101446934/20220906101446934.html" target="_blank">Cookies政策</a><a class="ace-link ace-link-primary ali-about-link" href="https://aliyun.jubao.alibaba.com/" target="_blank">廉正举报</a><a class="ace-link ace-link-primary ali-about-link" href="https://report.aliyun.com/" target="_blank">安全举报</a><a class="ace-link ace-link-primary ali-about-link" href="https://www.aliyun.com/contact" target="_blank">联系我们</a><a class="ace-link ace-link-primary ali-about-link" href="https://careers.aliyun.com/" target="_blank">加入我们</a></div><div class="friend-link-wrap"><a class="ace-link ace-link-primary ali-friend-link" href="https://www.alibabagroup.com/cn/global/home" target="_blank">阿里巴巴集团</a><a class="ace-link ace-link-primary ali-friend-link" href="https://www.taobao.com/" target="_blank">淘宝网</a><a class="ace-link ace-link-primary ali-friend-link" href="https://www.tmall.com/" target="_blank">天猫</a><a class="ace-link ace-link-primary ali-friend-link" href="https://www.aliexpress.com/" target="_blank">全球速卖通</a><a class="ace-link ace-link-primary ali-friend-link" href="https://www.alibaba.com/" target="_blank">阿里巴巴国际交易市场</a><a class="ace-link ace-link-primary ali-friend-link" href="https://www.1688.com/" target="_blank">1688</a><a class="ace-link ace-link-primary ali-friend-link" href="https://www.alimama.com/index.htm" target="_blank">阿里妈妈</a><a class="ace-link ace-link-primary ali-friend-link" href="https://www.fliggy.com/" target="_blank">飞猪</a><a class="ace-link ace-link-primary ali-friend-link" href="https://www.aliyun.com/" target="_blank">阿里云计算</a><a class="ace-link ace-link-primary ali-friend-link" href="https://www.alios.cn/" target="_blank">AliOS</a><a class="ace-link ace-link-primary ali-friend-link" href="https://wanwang.aliyun.com/" target="_blank">万网</a><a class="ace-link ace-link-primary ali-friend-link" href="https://mobile.amap.com/" target="_blank">高德</a><a class="ace-link ace-link-primary ali-friend-link" href="https://www.uc.cn/" target="_blank">UC</a><a class="ace-link ace-link-primary ali-friend-link" href="https://www.umeng.com/" target="_blank">友盟</a><a class="ace-link ace-link-primary ali-friend-link" href="https://www.youku.com/" target="_blank">优酷</a><a class="ace-link ace-link-primary ali-friend-link" href="https://www.dingtalk.com/" target="_blank">钉钉</a><a class="ace-link ace-link-primary ali-friend-link" href="https://www.alipay.com/" target="_blank">支付宝</a><a class="ace-link ace-link-primary ali-friend-link" href="https://damo.alibaba.com/" target="_blank">达摩院</a><a class="ace-link ace-link-primary ali-friend-link" href="https://world.taobao.com/" target="_blank">淘宝海外</a><a class="ace-link ace-link-primary ali-friend-link" href="https://www.aliyundrive.com/" target="_blank">阿里云盘</a><a class="ace-link ace-link-primary ali-friend-link" href="https://www.ele.me/" target="_blank">饿了么</a><div class="ali-copyright-text">© 2009-2023 Aliyun.com 版权所有 增值电信业务经营许可证： <a href="http://beian.miit.gov.cn/" target="_blank">浙B2-20080101</a> 域名注册服务机构许可： <a href="https://domain.miit.gov.cn/域名注册服务机构/互联网域名/阿里云计算有限公司 " target="_blank">浙D3-20210002</a> <a href="https://domain.miit.gov.cn/域名注册服务机构/互联网域名/阿里巴巴云计算北京有限公司 " target="_blank">京D3-20220015</a></div></div><div class="ali-report-wrap"><a class="ace-link ace-link-primary ali-report-link" href="https://terms.alicdn.com/legal-agreement/terms/c_platform_service_agreement/20230704140635655/20230704140635655.html" target="_blank"><img src="//gw.alicdn.com/tfs/TB1GxwdSXXXXXa.aXXXXXXXXXXX-65-70.gif" class="ali-report-img"/></a><a class="ace-link ace-link-primary ali-report-link" href="http://www.beian.gov.cn/portal/registerSystemInfo" target="_blank"><img src="//img.alicdn.com/tfs/TB1..50QpXXXXX7XpXXXXXXXXXX-40-40.png" class="ali-report-img"/><span class="ali-report-link-text">浙公网安备 33010602009975号</span></a><a class="ace-link ace-link-primary ali-report-link" href="https://beian.miit.gov.cn/" target="_blank"><span class="ali-report-link-text ali-report-link-text-unique">浙B2-20080101-4</span></a></div></div> </div></div><div class="mobile-container response-mobile-container"><div class="blogroll"><div class="ul"><div class="blogroll-item item-bottom"><div class="title">关注我们：</div><a class="ace-link ace-link-primary content" href="https://weibo.com/u/1644971875">新浪微博 <div class="logo WeiBo"></div></a></div></div></div><a class="ace-link ace-link-primary presale" href="https://www.aliyun.com/contact">联系我们</a><img data-src="https://img.alicdn.com/tfs/TB13DzOjXP7gK0jSZFjXXc5aXXa-212-48.png" class="alyun-logo" alt="阿里云"/><div class="copyright">© 2009-2023 Aliyun.com 版权所有&lt;br/&gt;增值电信业务经营许可证： &lt;a href=&quot;http://beian.miit.gov.cn/&quot; target=&quot;_blank&quot;&gt;浙B2-20080101&lt;/a&gt; &lt;br/&gt;域名注册服务机构许可： &lt;a href=&quot;https://domain.miit.gov.cn/域名注册服务机构/互联网域名/阿里云计算有限公司 &quot; target=&quot;_blank&quot;&gt;浙D3-20210002&lt;/a&gt; &lt;a href=&quot;https://domain.miit.gov.cn/域名注册服务机构/互联网域名/阿里巴巴云计算北京有限公司 &quot; target=&quot;_blank&quot;&gt;京D3-20220015&lt;/a&gt;</div></div></div></div>

<script>
if(_performance_domEnd <= 10000){
// pcp上报
window.ALIYUN_PERF && window.ALIYUN_PERF.report();
window.ALIYUN_PERF && window.ALIYUN_PERF.getPCP().then(rst => {
// pcp埋点
var data = {
product: 'help.aliyun.com', // 站点
ua: navigator.userAgent, // ua
device: 'pc', // 设备
page: 'document', // 页面
lang: 'zh', //站点语言
cna: '', // 用户标识
url: window.location.href,
action: 'pcp',
userParams1: rst || 0,
};
let queryStr = Object.keys(data).map(key => data[key] &&
`${encodeURIComponent(key)}=${encodeURIComponent(data[key])}`).join('&');
fetch('https://help-new.cn-wulanchabu.log.aliyuncs.com/logstores/web-tracking/track?APIVersion=0.6.0&' +
queryStr);
});
}
// fastLogin标记
window.FastLoginContext = {
tenantName: 'help-aliyun-com-portal',
};
</script>
<script crossorigin src="https://g.alicdn.com/code/lib/??react/16.8.6/umd/react.production.min.js,react-dom/16.8.6/umd/react-dom.production.min.js"></script>
<script src="https://gw.alipayobjects.com/os/lib/jquery/3.6.0/dist/jquery.min.js" crossorigin="anonymous"></script>
<script src="https://gw.alipayobjects.com/os/lib/lodash/4.17.21/lodash.min.js" crossorigin="anonymous"></script>
<script async src="https://g.alicdn.com/aliyun-help/help-portal-fe/0.8.2/js/vendor.js"></script>
<script async src="https://g.alicdn.com/aliyun-help/help-portal-fe/0.8.2/js/index.js"></script>
<script async src="//g.alicdn.com/dawn/assets-loader/scripts/fast-login.js?tenantName=help-aliyun-com-portal"></script>
<script src="https://g.alicdn.com/code/npm/@ali/??biu-loader/0.1.2/index.js,hmod-preact/0.0.1/index.js,hmod-preact-hooks/0.0.1/index.js,hmod-preact-compat/0.0.1/index.js,hmod-preact-bridge/0.1.0/index.js,hmod-ace-service-loader/0.1.1/index.js"></script>
<script src="https://g.alicdn.com/code/npm/@ali??hmod-ace-2023-box/0.1.0/index.js,hmod-ace-2023-service-contact-us/0.0.18/index.js,hmod-aliyun-com-global-nav-search/0.1.3/index.js,hmod-aliyun-com-global-nav/0.0.36/index.js"></script>
<script src="https://g.alicdn.com/aliyun-com/lowcode-engine/0.1.14/renderer/build/js/index.js"></script>
<script src="https://cloud-assets.alicdn.com/lowcode/entry/prod/31f097a615eef901ef451ec038130e2e.js"></script>
<script src="https://g.alicdn.com/??dawn/user-tracker/2.0.66/js/index.js,aliyun/perf/js/index.js"></script>
</body>
</html>
