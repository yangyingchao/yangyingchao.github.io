<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>cpp on 杂七杂八随手记</title><link>https://yangyingchao.github.io/tags/cpp/</link><description>Recent content in cpp on 杂七杂八随手记</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Fri, 18 Aug 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://yangyingchao.github.io/tags/cpp/index.xml" rel="self" type="application/rss+xml"/><item><title>What it means when you convert between different shared_ptrs - The Old New Thing</title><link>https://yangyingchao.github.io/posts/p108611/</link><pubDate>Fri, 18 Aug 2023 00:00:00 +0000</pubDate><guid>https://yangyingchao.github.io/posts/p108611/</guid><description>C++中的 shared_ptr 管理一个引用计数指针。通常情况下，它是一个指向对象的指针，当最后一个引用过期时将被删除。但它不一定非得是这样。 回想一下， shared_ptr 实际上</description></item><item><title>All Major C++17 Features You Should Know</title><link>https://yangyingchao.github.io/posts/all-major-c++17-features-you-should-know/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yangyingchao.github.io/posts/all-major-c++17-features-you-should-know/</guid><description>Table of Contents 1 Language Features 1.1 New auto rules for direct-list-initialization 1.2 static_assert with no message 1.3 typename in a template template parameter 1.4 Nested namespace definition 1 Language Features 1.1 New auto rules for direct-list-initialization 1.2 static_assert with no message static_assert() 可以不用再写 message 了， 类似 C assert 1.3 typename in a template template parameter 模板中以前只能</description></item><item><title>std::initializer_list in C++</title><link>https://yangyingchao.github.io/posts/stdinitializer_list_caveats_and_improvements/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yangyingchao.github.io/posts/stdinitializer_list_caveats_and_improvements/</guid><description>Table of Contents 1 Referencing local array 2 The cost of copying elements 1 Referencing local array std::initializer_list 在使用中会转化成为常量对象的匿名局部数组： 1 2 3 4 5 6 std::initializer_list&amp;lt;int&amp;gt; wrong() { // for illustration only! return { 1, 2, 3, 4}; } int main() { std::initializer_list&amp;lt;int&amp;gt; x = wrong(); } The above code</description></item></channel></rss>