<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>cpp on MyNotes</title><link>https://yangyingchao.github.io/tags/cpp/</link><description>Recent content in cpp on MyNotes</description><generator>Hugo -- 0.115.0</generator><language>zh-cn</language><lastBuildDate>Mon, 14 Oct 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://yangyingchao.github.io/tags/cpp/index.xml" rel="self" type="application/rss+xml"/><item><title>C++ String Conversion: Exploring std::from_chars in C++17 to C++26</title><link>https://yangyingchao.github.io/posts/www_cppstories_com_fromchars/</link><pubDate>Mon, 14 Oct 2024 00:00:00 +0000</pubDate><guid>https://yangyingchao.github.io/posts/www_cppstories_com_fromchars/</guid><description>1 Before C++17 2 Converting From Characters to Numbers: from_chars 2.1 示例 3 性能 4 C++23 更新 5 C++26 更新 6 C++ 中对 std::from_chars 的编译器支持 7 总结 本文为摘录，原文为： https://www.cppstories.com/2018/12/fromchars/ 随着引入 C++17，C++标准库通过添加 std::from_chars</description></item><item><title>Spans, string_view, and Ranges - Four View types (C++17 to C++23) - C++ Stories</title><link>https://yangyingchao.github.io/posts/four-views-in-cpp23/</link><pubDate>Tue, 10 Oct 2023 00:00:00 +0000</pubDate><guid>https://yangyingchao.github.io/posts/four-views-in-cpp23/</guid><description>1 String View (C++17) SVG Image 1.1 string_view vs const string &amp;amp; 2 Span (C++20) 3 Range Views (C++20) 4 MD Span (C++23) 5 Comparing Spans to Range Views 6 Summary 本文为摘录，原文为： https://www.cppstories.com/2023/four-views-in-cpp23/ 在本博客文章中，我们将探讨现代 C++中引入的几种不同的视</description></item><item><title>What it means when you convert between different shared_ptrs - The Old New Thing</title><link>https://yangyingchao.github.io/posts/p108611/</link><pubDate>Fri, 18 Aug 2023 00:00:00 +0000</pubDate><guid>https://yangyingchao.github.io/posts/p108611/</guid><description>本文为摘录，原文为： https://devblogs.microsoft.com/oldnewthing/20230817-00/?p=108611 C++中的 shared_ptr 管理一个引用计数指针。通常情况下，它是一个指向对象的指针，当最后一个引用过期时将被删除。但它不一定非得是这</description></item><item><title>All Major C++17 Features You Should Know</title><link>https://yangyingchao.github.io/posts/all-major-c++17-features-you-should-know/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yangyingchao.github.io/posts/all-major-c++17-features-you-should-know/</guid><description>1 Language Features 1.1 New auto rules for direct-list-initialization 1.2 static_assert with no message 1.3 typename in a template template parameter 1.4 Nested namespace definition 本文为摘录，原文为： https://www.cppstories.com/2017/01/cpp17features/ 1 Language Features 1.1 New auto rules for direct-list-initialization 1.2 static_assert with no message static_assert() 可以不用再写 message 了， 类似 C assert 1.3 typename in a template template</description></item><item><title>std::initializer_list in C++</title><link>https://yangyingchao.github.io/posts/stdinitializer_list_caveats_and_improvements/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yangyingchao.github.io/posts/stdinitializer_list_caveats_and_improvements/</guid><description>1 Referencing local array 2 The cost of copying elements 本文为摘录，原文为： https://www.cppstories.com/2023/initializer_list_improvements/ 1 Referencing local array std::initializer_list 在使用中会转化成为常量对象的匿名局部数组： std::initializer_list&amp;lt;int&amp;gt; wrong() { // for illustration only! return { 1, 2, 3, 4}; } int main() { std::initializer_list&amp;lt;int&amp;gt; x = wrong(); } The</description></item></channel></rss>