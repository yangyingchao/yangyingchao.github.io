<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>htap - Tag - My New Hugo Site</title>
        <link>http://yangyingchao.github.io/tags/htap/</link>
        <description>htap - Tag - My New Hugo Site</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Tue, 22 Aug 2023 00:00:00 &#43;0000</lastBuildDate><atom:link href="http://yangyingchao.github.io/tags/htap/" rel="self" type="application/rss+xml" /><item>
    <title>GaussDB技术解读系列之HTAP方向的探索与发展</title>
    <link>http://yangyingchao.github.io/posts/gaussdb%E6%8A%80%E6%9C%AF%E8%A7%A3%E8%AF%BB%E7%B3%BB%E5%88%97%E4%B9%8Bhtap%E6%96%B9%E5%90%91%E7%9A%84%E6%8E%A2%E7%B4%A2%E4%B8%8E%E5%8F%91%E5%B1%95/</link>
    <pubDate>Tue, 22 Aug 2023 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>http://yangyingchao.github.io/posts/gaussdb%E6%8A%80%E6%9C%AF%E8%A7%A3%E8%AF%BB%E7%B3%BB%E5%88%97%E4%B9%8Bhtap%E6%96%B9%E5%90%91%E7%9A%84%E6%8E%A2%E7%B4%A2%E4%B8%8E%E5%8F%91%E5%B1%95/</guid>
    <description><![CDATA[1 什么是 HTAP？ 2 HTAP 架构模式有哪些？ 2.1 IN-Memory Store 模式 2.2 主备架构模式 2.3 IN-Memory Computing 模式 2.4 主列存+增量行存模式 3 思考 3.1 GaussDB 对 HTAP 的思考 4 GaussDB 在 HTAP 上的创新 1 什么是 HTAP？ TP 和 AP 的特点
TP 一般是做交易型的业务， 它的数据量通常来说比较小，在 GB~TB 的范围内， 它要求低时延、高吞吐，同时对高可用、故障恢复要求较高。 AP 一般用于对历史数 据做分析，根据数据分析的结论为企业的商业决策提供一些支撑，因此 AP 对时延和吞吐的要求没有 那么高， 主要面对数据量大、查询偏复杂的场景。 2010 年左右，业内开始考虑把 TP 和 AP 同时融合到同一个数据库里，通过这种 方式提升数据库处理数据的能力
总结了 HTAP 有两个关键特点:
一个是采用 In-Memory 的架构。 我们可以看到，无论是老牌的数据库厂商，还是新兴的数据库厂商，都不约而同采用 In-Memory 的架构来实现 HTAP。
另外一个是实时。 我们当前的架构主要是，交易型的业务在行存的数据库上，分析型的业务在列存的数仓上，中间通过 ETL 工具传输数据。这个架构的问题是，它的数据新鲜度不够好，比如说先前在互联网应用方面，我们经常做一些个性化的用户推荐，在给用户推荐感兴趣的商品时，会在登录时对它进行一个用户画像，根据用户画像的结果推荐产品，这是一种实时分析的能力。另外就是防诈骗系统，需要实时的响应，实时分析这笔交易是否为诈骗交易。这种实时性的特点，对 HTAP 方案提出了新的要求。我们当前的 HTAP 架构主要应对实时 AP 分析的能力，实时 AP 对性能上有一些影响，它随着数据新鲜度，也就是实时性要求变高，数据库的性能会有一些下降。]]></description>
</item>
</channel>
</rss>
