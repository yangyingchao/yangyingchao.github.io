<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Lock - 标签 - 老杨的杂货铺</title><link>https://yangyingchao.github.io/tags/lock/</link><description>Lock - 标签 - 老杨的杂货铺</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Sat, 16 Dec 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://yangyingchao.github.io/tags/lock/" rel="self" type="application/rss+xml"/><item><title>how to avoid memory being swapped (locking memory pages)</title><link>https://yangyingchao.github.io/how-to-avoid-memory-being-swapped/</link><pubDate>Sat, 16 Dec 2023 00:00:00 +0000</pubDate><author>yc</author><guid>https://yangyingchao.github.io/how-to-avoid-memory-being-swapped/</guid><description><![CDATA[<div class="ox-hugo-toc toc has-section-numbers">
<div class="heading">Table of Contents</div>
<ul>
<li><span class="section-num">1</span> <a href="#h:a69e195a-92fb-405b-9b6c-ec86c0015e47" rel="">mlockall()</a></li>
<li><span class="section-num">2</span> <a href="#h:694a46e8-f346-48c2-a21e-a71751c8643d" rel="">how to do this after program started and program does not call <code>mlockall()</code> ?</a></li>
<li><span class="section-num">3</span> <a href="#h:a99f5c47-b061-4e47-a7f0-51dcf4e3b852" rel="">内核实现</a>
<ul>
<li><span class="section-num">3.1</span> <a href="#h:6ff510c5-4a77-4766-b6ec-49b25660504a" rel="">mlockall()</a></li>
<li><span class="section-num">3.2</span> <a href="#h:75a484c0-9716-44e8-8811-9041f9878f19" rel="">内存区域标记</a></li>
</ul>
</li>
<li><span class="section-num">4</span> <a href="#h:7ad9b325-1adc-4075-ac3b-3e92208ae6a6" rel="">Swap</a>
<ul>
<li><span class="section-num">4.1</span> <a href="#h:ddbd6d4f-ac07-456e-a148-dcdeac5f975d" rel="">Swap info</a></li>
<li><span class="section-num">4.2</span> <a href="#h:1fe99bb1-aeb0-4a49-9efe-56e123310ee6" rel="">Locks</a></li>
<li><span class="section-num">4.3</span> <a href="#h:36e44df6-8e26-4bd4-bfc8-80df31b3614b" rel="">fork 时候复制 swap…</a></li>
<li><span class="section-num">4.4</span> <a href="#h:cb155170-b5a3-421f-9f98-090780fbf82a" rel="">进程退出时候清理 swap 。。。</a></li>
</ul>
</li>
<li><span class="section-num">5</span> <a href="#h:e5964c54-29f4-42fa-af12-10ca1093f20b" rel="">RLIMIT_MEMLOCK</a></li>
</ul>
</div>
<!--endtoc-->
<p>本文为摘录，原文为： <a href="https://stackoverflow.com/questions/12520499/linux-how-to-lock-the-pages-of-a-process-in-memory" target="_blank" rel="noopener noreffer ">https://stackoverflow.com/questions/12520499/linux-how-to-lock-the-pages-of-a-process-in-memory</a></p>
<h2 id="h:a69e195a-92fb-405b-9b6c-ec86c0015e47"><span class="section-num">1</span> mlockall()</h2>
<p>from manpage:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">mlockall() and munlockall()
</span></span><span class="line"><span class="cl">    mlockall() locks all pages mapped into the address space of the  calling  process.   This  in‐
</span></span><span class="line"><span class="cl">    cludes the pages of the code, data, and stack segment, as well as shared libraries, user space
</span></span><span class="line"><span class="cl">    kernel data, shared memory, and memory-mapped files.  All mapped pages are  guaranteed  to  be
</span></span><span class="line"><span class="cl">    resident  in  RAM  when the call returns successfully; the pages are guaranteed to stay in RAM
</span></span><span class="line"><span class="cl">    until later unlocked.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    The flags argument is constructed as the bitwise OR of one or more of the following constants:
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    MCL_CURRENT
</span></span><span class="line"><span class="cl">           Lock all pages which are currently mapped into the address space of the process.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    MCL_FUTURE
</span></span><span class="line"><span class="cl">           Lock all pages which will become mapped into the address space of the  process  in  the
</span></span><span class="line"><span class="cl">           future.   These  could be, for instance, new pages required by a growing heap and stack
</span></span><span class="line"><span class="cl">           as well as new memory-mapped files or shared memory regions.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    MCL_ONFAULT (since Linux 4.4)
</span></span><span class="line"><span class="cl">           Used together with MCL_CURRENT, MCL_FUTURE, or both.  Mark all current  (with  MCL_CUR‐
</span></span><span class="line"><span class="cl">           RENT)  or  future  (with  MCL_FUTURE)  mappings to lock pages when they are faulted in.
</span></span><span class="line"><span class="cl">           When used with MCL_CURRENT, all present pages are locked, but mlockall() will not fault
</span></span><span class="line"><span class="cl">           in non-present pages.  When used with MCL_FUTURE, all future mappings will be marked to
</span></span><span class="line"><span class="cl">           lock pages when they are faulted in, but they will not be populated by  the  lock  when
</span></span><span class="line"><span class="cl">           the mapping is created.  MCL_ONFAULT must be used with either MCL_CURRENT or MCL_FUTURE
</span></span><span class="line"><span class="cl">           or both.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    If MCL_FUTURE has been specified, then a later  system  call  (e.g.,  mmap(2),  sbrk(2),  mal‐
</span></span><span class="line"><span class="cl">    loc(3)), may fail if it would cause the number of locked bytes to exceed the permitted maximum
</span></span><span class="line"><span class="cl">    (see below).  In the same circumstances, stack growth may likewise fail: the kernel will  deny
</span></span><span class="line"><span class="cl">    stack expansion and deliver a SIGSEGV signal to the process.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">munlockall() unlocks all pages mapped into the address space of the calling process.
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="h:694a46e8-f346-48c2-a21e-a71751c8643d"><span class="section-num">2</span> how to do this after program started and program does not call <code>mlockall()</code> ?</h2>
<p>Make a GDB command file that contains something like this:</p>]]></description></item><item><title>Lock out user after three failed login attempts</title><link>https://yangyingchao.github.io/security%23lock_out_user_after_three_failed_login_attempts/</link><pubDate>Mon, 21 Aug 2023 00:00:00 +0000</pubDate><author>yc</author><guid>https://yangyingchao.github.io/security%23lock_out_user_after_three_failed_login_attempts/</guid><description><![CDATA[<div class="ox-hugo-toc toc has-section-numbers">
<div class="heading">Table of Contents</div>
<ul>
<li><span class="section-num">1</span> <a href="#h:38aae4aa-a802-4cff-9ffb-1ecebc230218" rel="">Lock out user after three failed login attempts</a></li>
</ul>
</div>
<!--endtoc-->
<p>本文为摘录，原文为： <a href="https://wiki.archlinux.org/title/Security#Lock_out_user_after_three_failed_login_attempts" target="_blank" rel="noopener noreffer ">https://wiki.archlinux.org/title/Security#Lock_out_user_after_three_failed_login_attempts</a></p>
<h2 id="h:38aae4aa-a802-4cff-9ffb-1ecebc230218"><span class="section-num">1</span> Lock out user after three failed login attempts</h2>
<p>截至 pambase 20200721.1-2 版本，pam_faillock.so 已默认启用，当用户在 15 分钟内尝试 3 次登录失败后会将其锁定 10 分钟
（参见 FS＃67644）。锁定仅适用于密码验证（例如登录和 sudo），通过 SSH 的公钥验证仍然被接受。为了防止完全的拒绝服务，对于默认情况下 root 用户将不会被锁定。</p>]]></description></item></channel></rss>