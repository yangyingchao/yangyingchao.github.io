<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>LSM on 杂货铺</title><link>https://yangyingchao.github.io/tags/lsm/</link><description>Recent content in LSM on 杂货铺</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://yangyingchao.github.io/tags/lsm/index.xml" rel="self" type="application/rss+xml"/><item><title>SA-LSM: Optimize Data Layout for LSM-tree Based Storage using Survial Analysis</title><link>https://yangyingchao.github.io/p2161-zhang/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yangyingchao.github.io/p2161-zhang/</guid><description>&lt;div class="ox-hugo-toc toc has-section-numbers"&gt;
&lt;div class="heading"&gt;Table of Contents&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class="section-num"&gt;1&lt;/span&gt; &lt;a href="#h:575da9a1-9545-4947-bccf-8d8b218005b7" rel=""&gt;ABSTRACT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="section-num"&gt;2&lt;/span&gt; &lt;a href="#h:e2299604-e4d5-417f-89bf-1d6f21baf3cc" rel=""&gt;INTRODUCTION&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;!--endtoc--&gt;
&lt;p&gt;本文为摘录(或转载)，侵删，原文为： attachments/pdf/5/p2161-zhang.pdf&lt;/p&gt;
&lt;h2 id="h:575da9a1-9545-4947-bccf-8d8b218005b7"&gt;&lt;span class="section-num"&gt;1&lt;/span&gt; ABSTRACT&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;云存储中很大一部分数据很少被访问，被称为 &lt;strong&gt;冷数据&lt;/strong&gt; 。&lt;/li&gt;
&lt;li&gt;精确地识别和有效地管理成本效益高的存储中的冷数据是云提供商面临的主要挑战之一，需要平衡降低成本和提高系统性能。&lt;/li&gt;
&lt;li&gt;为此，提出了 &lt;strong&gt;SA-LSM&lt;/strong&gt; 来利用生存分析（Survival Analysis）的方式来处理 LSM-tree 键值（KV）存储。&lt;/li&gt;
&lt;li&gt;传统上，LSM-tree 的数据布局是由写操作和压实操作共同确定的。&lt;/li&gt;
&lt;li&gt;然而，该过程默认情况下并未充分利用数据记录的访问信息，导致次优的数据布局，对系统性能产生负面影响。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SA-LMS&lt;/strong&gt; 使用生存分析，一种在生物统计学中常用的统计学习算法来优化数据布局。&lt;/li&gt;
&lt;li&gt;当与合适的 &lt;strong&gt;LSM-tree&lt;/strong&gt; 实现结合使用时，SA-LSM 可以使用历史信息和访问痕迹准确预测冷数据。&lt;/li&gt;
&lt;li&gt;具体实现方面，将 &lt;strong&gt;SA-LSM&lt;/strong&gt; 应用于商业化开源 &lt;strong&gt;LSM-tree&lt;/strong&gt; 存储引擎 &lt;strong&gt;X-Engine&lt;/strong&gt; 中&lt;/li&gt;
&lt;li&gt;了使部署更加灵活，还设计了一种非侵入式架构，可以将 CPU 密集型任务（例如模型训练和推断）卸载到外部服务上。&lt;/li&gt;
&lt;li&gt;在真实工作负载上的广泛实验表明，与现有技术相比，SA-LSM 可以将尾延迟降低高达 78.9％。&lt;/li&gt;
&lt;li&gt;这种方法的通用性和显著性能提升在相关应用中具有巨大潜力。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="h:e2299604-e4d5-417f-89bf-1d6f21baf3cc"&gt;&lt;span class="section-num"&gt;2&lt;/span&gt; INTRODUCTION&lt;/h2&gt;
&lt;p&gt;为了降低存储成本，LSM 树变成了一种越来越受欢迎的架构。它引入了多层异构存储:&lt;/p&gt;</description></item><item><title>X-Engine: An optimized storage engine for TP</title><link>https://yangyingchao.github.io/sigmod-xengine/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yangyingchao.github.io/sigmod-xengine/</guid><description>&lt;div class="ox-hugo-toc toc has-section-numbers"&gt;
&lt;div class="heading"&gt;Table of Contents&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class="section-num"&gt;1&lt;/span&gt; &lt;a href="#h:2c165c11-315a-4b37-8b21-0aa7abc2c686" rel=""&gt;Abstract&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="section-num"&gt;2&lt;/span&gt; &lt;a href="#h:9146fed8-4330-42f2-8e09-1b18a38a1c6d" rel=""&gt;System Overview&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class="section-num"&gt;2.1&lt;/span&gt; &lt;a href="#h:51404d1c-1567-40d0-a7fe-1f2481f6c3fa" rel=""&gt;Storage layout.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;!--endtoc--&gt;
&lt;p&gt;本文为摘录(或转载)，侵删，原文为： attachments/pdf/7/sigmod-xengine.pdf&lt;/p&gt;
&lt;h2 id="h:2c165c11-315a-4b37-8b21-0aa7abc2c686"&gt;&lt;span class="section-num"&gt;1&lt;/span&gt; Abstract&lt;/h2&gt;
&lt;p&gt;在线电商交易具有三个显著特点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;随着主要销售和促销活动的开始，每秒交易数量急剧增加；&lt;/li&gt;
&lt;li&gt;大量的热门记录很容易压垮系统缓冲区；&lt;/li&gt;
&lt;li&gt;由于不同类别的促销在不同的短时间内可用，不同记录的“温度”（热、温、冷）会快速转换。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;为了解决这些挑战，阿里巴巴引入了一种名为 X-Engine 的新的存储引擎，它是 POLARDB
的一种优化的写入存储引擎。它采用分层存储体系结构和 LSM 树（日志结构合并树）来利用硬件加速，例如 FPGA 加速压实，并提供一系列优化，包括事务中的异步写入、多阶段管道和压实期间的增量缓存替换。评估结果表明，X-Engine 在此类事务负载下表现出更高的性能。&lt;/p&gt;</description></item></channel></rss>