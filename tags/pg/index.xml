<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>pg on MyNotes</title><link>https://yangyingchao.github.io/tags/pg/</link><description>Recent content in pg on MyNotes</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Fri, 08 Dec 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://yangyingchao.github.io/tags/pg/index.xml" rel="self" type="application/rss+xml"/><item><title>OCI Database with PostgreSQL: 完善OCI的云数据库套件以满足各种需求</title><link>https://yangyingchao.github.io/posts/oci-database-with-postgresql-%E5%AE%8C%E5%96%84oci%E7%9A%84%E4%BA%91%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A5%97%E4%BB%B6%E4%BB%A5%E6%BB%A1%E8%B6%B3%E5%90%84%E7%A7%8D%E9%9C%80%E6%B1%82/</link><pubDate>Fri, 08 Dec 2023 00:00:00 +0000</pubDate><guid>https://yangyingchao.github.io/posts/oci-database-with-postgresql-%E5%AE%8C%E5%96%84oci%E7%9A%84%E4%BA%91%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A5%97%E4%BB%B6%E4%BB%A5%E6%BB%A1%E8%B6%B3%E5%90%84%E7%A7%8D%E9%9C%80%E6%B1%82/</guid><description>1 为什么 OCI Database for PostgreSQL 脱颖而出 2 Vanilla PostgreSQL 的问题 3 OCI Database with PostgreSQL – 高级架构 3.1 数据库优化存储 (DbOS) 的优点 3.2 进一步的存储优化 3.3 结论 本文为摘录，原文为： https://mp.weixin.qq.com/s?__biz=MzI3OTM3MDkyNg==&amp;amp;mid=2247497316&amp;amp;idx=1&amp;amp;sn=d08b84d63ab2e4b69949af9170762189&amp;amp;chksm=eb4a7ba5dc3df2b3ca2b3721e5614ab5711be6e984ec44173035323953d193440240f8412591&amp;amp;mpshare=1&amp;amp;scene=1&amp;amp;srcid=1208AtRH30qSa2LdMxzmf3sV&amp;amp;sharer_shareinfo=9a0858a92025bbb0e8887abc9a5eee8a&amp;amp;sharer_shareinfo_first=9a0858a92025bbb0e8887abc9a5eee8a#rd 对于希望在云中</description></item><item><title>Barriers in PostgresSQL</title><link>https://yangyingchao.github.io/posts/barriers-in-postgressql/</link><pubDate>Sat, 21 Oct 2023 00:00:00 +0000</pubDate><guid>https://yangyingchao.github.io/posts/barriers-in-postgressql/</guid><description>1 Barriers: 协调进程的同步屏障 1.1 静态参与 2 TODO: Barriers API 3 TODO: how it is used in hash jon… 简单总结一下 PG 中进程同步用到的屏障： https://github.com/postgres/postgres/blob/master/src/backend/storage/ipc/barrier.c 1 Barriers: 协调进程的同步屏障 来自维基百科[1</description></item><item><title>云数据库 PostgreSQL 日志管理及分析-操作指南-文档中心-腾讯云</title><link>https://yangyingchao.github.io/posts/10790/</link><pubDate>Tue, 15 Aug 2023 00:00:00 +0000</pubDate><guid>https://yangyingchao.github.io/posts/10790/</guid><description>1 慢查询 1.1 功能说明 1.2 监控视图 1.3 慢 SQL 列表 1.4 慢 SQL 统计分析 1.5 功能说明 2 错误日志 3 错误日志默认设置 4 运行日志管理 4.1 PG_LOG 介绍 4.2 修改 PG_LOG 保留时长 本文为摘录，</description></item><item><title>The Part of PostgreSQL We Hate the Most</title><link>https://yangyingchao.github.io/posts/the-part-of-postgresql-we-hate-the-most/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yangyingchao.github.io/posts/the-part-of-postgresql-we-hate-the-most/</guid><description>1 What is Multi-Version Concurrency Control? 2 PostgreSQL’s Multi-Version Concurrency Control 2.1 Multi-Versioned Storage 2.2 Version Vacuum 3 Why PostgreSQL’s MVCC is the Worst 3.1 Problem #1: Version Copying 3.2 Problem #2: Table Bloat 3.3 Problem #3: Secondary Index Maintenance 3.4 Problem #4: Vacuum Management 4 Concluding Remarks</description></item></channel></rss>